@* Ui层项目 - 启动服务文件 *@
@using Util.Generators.Helpers
@model Util.Generators.Contexts.EntityContext
@{
    var service = new GenerateService( Model );
    Model.Output.FileNameNoExtension = "startup.service";
    Model.Output.Extension = ".ts";
    Model.Output.RelativeRootPath = $"src/{service.GetUiProjectName()}/ClientApp/src/app/core/startup";
}
import { Injectable, Inject } from '@@angular/core';
import { Router } from '@@angular/router';
import { HttpClient } from '@@angular/common/http';
import { DA_SERVICE_TOKEN, ITokenService } from '@@delon/auth';
import { ALAIN_I18N_TOKEN, MenuService, SettingsService, TitleService } from '@@delon/theme';
import { ACLService } from '@@delon/acl';
import { Observable, zip } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import type { NzSafeAny } from 'ng-zorro-antd/core/types';
import { I18NService } from '../i18n/i18n.service';

/**
 * 初始化启动服务
 */
@@Injectable()
export class StartupService {
    constructor(
        private menuService: MenuService,
        @@Inject(ALAIN_I18N_TOKEN) private i18n: I18NService,
        private settingService: SettingsService,
        private aclService: ACLService,
        private titleService: TitleService,
        @@Inject(DA_SERVICE_TOKEN) private tokenService: ITokenService,
        private httpClient: HttpClient,
        private router: Router
    ) {
    }

    load(): Observable<void> {
        const defaultLang = this.i18n.defaultLang;
        return zip(this.i18n.loadLangData(defaultLang), this.httpClient.get('assets/app-data.json')).pipe(
            // 接收其他拦截器后产生的异常消息
            catchError(res => {
                console.warn(`StartupService.load: Network request failed`, res);
                setTimeout(() => this.router.navigateByUrl(`/exception/500`));
                return [];
            }),
            map(([langData, appData]: [Record<string, string>, NzSafeAny]) => {
                // setting language data
                this.i18n.use(defaultLang, langData);

                // 应用信息：包括站点名、描述、年份
                this.settingService.setApp(appData.app);
                // 用户信息：包括姓名、头像、邮箱地址
                this.settingService.setUser(appData.user);
                // ACL：设置权限为全量
                this.aclService.setFull(true);
                // 初始化菜单
                this.menuService.add(appData.menu);
                // 设置页面标题的后缀
                this.titleService.default = '';
                this.titleService.suffix = appData.app.name;
            })
        );
    }
}
