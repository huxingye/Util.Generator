@* Ui层项目 - 核心模块文件 *@
@using Util.Generators.Helpers
@model Util.Generators.Contexts.EntityContext
@{
    var service = new GenerateService( Model );
    Model.Output.FileNameNoExtension = "core.module";
    Model.Output.Extension = ".ts";
    Model.Output.RelativeRootPath = $"src/{service.GetUiProjectName()}/ClientApp/src/app/core";
}
import { NgModule, Optional, SkipSelf, ModuleWithProviders, APP_INITIALIZER } from '@@angular/core';
import { AuthConfig, OAuthModuleConfig, OAuthModule } from 'angular-oauth2-oidc';
import { authConfig } from './auth/auth-config';
import { authModuleConfig } from './auth/auth-module-config';
import { authAppInitializerFactory } from './auth/auth-app-initializer.factory';
import { AuthService } from './auth/auth.service';

/**
* 核心模块
*/
@@NgModule({
    imports: [OAuthModule.forRoot()],
    providers: []
})
export class CoreModule {
    /**
    * 初始化核心模块
    */
    constructor(@@Optional() @@SkipSelf() parent: CoreModule) {
        if (parent) {
            throw new Error('核心模块已加载！');
        }
    }

    /**
    * 核心模块
    */
    static forRoot(): ModuleWithProviders<CoreModule> {
        return {
            ngModule: CoreModule,
            providers: [
                //{ provide: APP_INITIALIZER, useFactory: authAppInitializerFactory, deps: [AuthService], multi: true },
                { provide: AuthConfig, useValue: authConfig },
                { provide: OAuthModuleConfig, useValue: authModuleConfig }
            ]
        };
    }
}