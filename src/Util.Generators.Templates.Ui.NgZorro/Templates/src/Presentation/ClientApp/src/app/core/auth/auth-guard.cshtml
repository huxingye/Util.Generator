@* Ui层项目 - 授权路由守卫文件 *@
@using Util.Generators.Helpers
@model Util.Generators.Contexts.EntityContext
@{
    var service = new GenerateService( Model );
    Model.Output.FileNameNoExtension = "auth-guard";
    Model.Output.Extension = ".ts";
    Model.Output.RelativeRootPath = $"src/{service.GetUiProjectName()}/ClientApp/src/app/core/auth";
}
import { Injectable } from '@@angular/core';
import { ActivatedRouteSnapshot, CanActivate, CanActivateChild, CanLoad, Route, RouterStateSnapshot, UrlSegment } from '@@angular/router';
import { filter, switchMap, tap } from 'rxjs/operators';
import { AuthService } from "./auth.service";

/**
* 授权路由守卫
*/
@@Injectable({ providedIn: 'root' })
export class AuthGuard implements CanActivate, CanActivateChild, CanLoad {
    /**
    * 初始化授权路由守卫
    * @@param authService 授权服务
    */
    constructor(private authService: AuthService) {
    }

    /**
    * 是否激活路由
    */
    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
        return this.process(state.url);
    }

    /**
    * 授权处理
    * @@param url 当前url地址
    */
    private process(url?: string) {
        return this.authService.isDoneLoading.pipe(
            filter(isDone => isDone === true),
            switchMap(_ => this.authService.isAuthenticated ),
            tap(isAuthenticated => isAuthenticated || this.authService.login(url)),
        );
    }

    /**
    * 是否激活路由
    */
    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
        return this.process(state.url);
    }

    /**
    * 是否加载延迟模块
    */
    canLoad(route: Route, segments: UrlSegment[]) {
        return this.process(route.path);
    }
}
